2025/05/27 10:57:41 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 936923599
    GPU 0,1,2,3,4: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
    PyTorch: 1.11.0
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.12.0
    OpenCV: 4.11.0
    MMEngine: 0.10.7

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 936923599
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/27 10:57:43 - mmengine - INFO - Config:
VOC_classes = [
    'aeroplane',
    'bicycle',
    'bird',
    'boat',
    'bottle',
    'bus',
    'car',
    'cat',
    'chair',
    'cow',
    'diningtable',
    'dog',
    'horse',
    'motorbike',
    'person',
    'pottedplant',
    'sheep',
    'sofa',
    'train',
    'tvmonitor',
]
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'data/VOCdevkit/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'work_dirs/sparse-rcnn_r50_fpn_ms-480-800-3x_coco/epoch_36.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 36
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        add_extra_convs='on_input',
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=4,
        out_channels=256,
        start_level=0,
        type='FPN'),
    roi_head=dict(
        bbox_head=[
            dict(
                bbox_coder=dict(
                    clip_border=False,
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.5,
                        0.5,
                        1.0,
                        1.0,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                dropout=0.0,
                dynamic_conv_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=64,
                    in_channels=256,
                    input_feat_shape=7,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='DynamicConv'),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=256,
                loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
                loss_cls=dict(
                    alpha=0.25,
                    gamma=2.0,
                    loss_weight=2.0,
                    type='FocalLoss',
                    use_sigmoid=True),
                loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
                num_classes=20,
                num_cls_fcs=1,
                num_ffn_fcs=2,
                num_heads=8,
                num_reg_fcs=3,
                type='DIIHead'),
            dict(
                bbox_coder=dict(
                    clip_border=False,
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.5,
                        0.5,
                        1.0,
                        1.0,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                dropout=0.0,
                dynamic_conv_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=64,
                    in_channels=256,
                    input_feat_shape=7,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='DynamicConv'),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=256,
                loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
                loss_cls=dict(
                    alpha=0.25,
                    gamma=2.0,
                    loss_weight=2.0,
                    type='FocalLoss',
                    use_sigmoid=True),
                loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
                num_classes=20,
                num_cls_fcs=1,
                num_ffn_fcs=2,
                num_heads=8,
                num_reg_fcs=3,
                type='DIIHead'),
            dict(
                bbox_coder=dict(
                    clip_border=False,
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.5,
                        0.5,
                        1.0,
                        1.0,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                dropout=0.0,
                dynamic_conv_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=64,
                    in_channels=256,
                    input_feat_shape=7,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='DynamicConv'),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=256,
                loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
                loss_cls=dict(
                    alpha=0.25,
                    gamma=2.0,
                    loss_weight=2.0,
                    type='FocalLoss',
                    use_sigmoid=True),
                loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
                num_classes=20,
                num_cls_fcs=1,
                num_ffn_fcs=2,
                num_heads=8,
                num_reg_fcs=3,
                type='DIIHead'),
            dict(
                bbox_coder=dict(
                    clip_border=False,
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.5,
                        0.5,
                        1.0,
                        1.0,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                dropout=0.0,
                dynamic_conv_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=64,
                    in_channels=256,
                    input_feat_shape=7,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='DynamicConv'),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=256,
                loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
                loss_cls=dict(
                    alpha=0.25,
                    gamma=2.0,
                    loss_weight=2.0,
                    type='FocalLoss',
                    use_sigmoid=True),
                loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
                num_classes=20,
                num_cls_fcs=1,
                num_ffn_fcs=2,
                num_heads=8,
                num_reg_fcs=3,
                type='DIIHead'),
            dict(
                bbox_coder=dict(
                    clip_border=False,
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.5,
                        0.5,
                        1.0,
                        1.0,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                dropout=0.0,
                dynamic_conv_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=64,
                    in_channels=256,
                    input_feat_shape=7,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='DynamicConv'),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=256,
                loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
                loss_cls=dict(
                    alpha=0.25,
                    gamma=2.0,
                    loss_weight=2.0,
                    type='FocalLoss',
                    use_sigmoid=True),
                loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
                num_classes=20,
                num_cls_fcs=1,
                num_ffn_fcs=2,
                num_heads=8,
                num_reg_fcs=3,
                type='DIIHead'),
            dict(
                bbox_coder=dict(
                    clip_border=False,
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.5,
                        0.5,
                        1.0,
                        1.0,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                dropout=0.0,
                dynamic_conv_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=64,
                    in_channels=256,
                    input_feat_shape=7,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='DynamicConv'),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=256,
                loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
                loss_cls=dict(
                    alpha=0.25,
                    gamma=2.0,
                    loss_weight=2.0,
                    type='FocalLoss',
                    use_sigmoid=True),
                loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
                num_classes=20,
                num_cls_fcs=1,
                num_ffn_fcs=2,
                num_heads=8,
                num_reg_fcs=3,
                type='DIIHead'),
        ],
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=2, type='RoIAlign'),
            type='SingleRoIExtractor'),
        num_stages=6,
        proposal_feature_channel=256,
        stage_loss_weights=[
            1,
            1,
            1,
            1,
            1,
            1,
        ],
        type='SparseRoIHead'),
    rpn_head=dict(
        num_proposals=100,
        proposal_feature_channel=256,
        type='EmbeddingRPNHead'),
    test_cfg=dict(rcnn=dict(max_per_img=100), rpn=None),
    train_cfg=dict(
        rcnn=[
            dict(
                assigner=dict(
                    match_costs=[
                        dict(type='FocalLossCost', weight=2.0),
                        dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                        dict(iou_mode='giou', type='IoUCost', weight=2.0),
                    ],
                    type='HungarianAssigner'),
                pos_weight=1,
                sampler=dict(type='PseudoSampler')),
            dict(
                assigner=dict(
                    match_costs=[
                        dict(type='FocalLossCost', weight=2.0),
                        dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                        dict(iou_mode='giou', type='IoUCost', weight=2.0),
                    ],
                    type='HungarianAssigner'),
                pos_weight=1,
                sampler=dict(type='PseudoSampler')),
            dict(
                assigner=dict(
                    match_costs=[
                        dict(type='FocalLossCost', weight=2.0),
                        dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                        dict(iou_mode='giou', type='IoUCost', weight=2.0),
                    ],
                    type='HungarianAssigner'),
                pos_weight=1,
                sampler=dict(type='PseudoSampler')),
            dict(
                assigner=dict(
                    match_costs=[
                        dict(type='FocalLossCost', weight=2.0),
                        dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                        dict(iou_mode='giou', type='IoUCost', weight=2.0),
                    ],
                    type='HungarianAssigner'),
                pos_weight=1,
                sampler=dict(type='PseudoSampler')),
            dict(
                assigner=dict(
                    match_costs=[
                        dict(type='FocalLossCost', weight=2.0),
                        dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                        dict(iou_mode='giou', type='IoUCost', weight=2.0),
                    ],
                    type='HungarianAssigner'),
                pos_weight=1,
                sampler=dict(type='PseudoSampler')),
            dict(
                assigner=dict(
                    match_costs=[
                        dict(type='FocalLossCost', weight=2.0),
                        dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                        dict(iou_mode='giou', type='IoUCost', weight=2.0),
                    ],
                    type='HungarianAssigner'),
                pos_weight=1,
                sampler=dict(type='PseudoSampler')),
        ],
        rpn=None),
    type='SparseRCNN')
num_proposals = 100
num_stages = 6
optim_wrapper = dict(
    clip_grad=dict(max_norm=1, norm_type=2),
    optimizer=dict(lr=2.5e-05, type='AdamW', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=36,
        gamma=0.1,
        milestones=[
            27,
            33,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='data/coco/voc07_test.json',
        data_prefix=dict(img='VOC2007/JPEGImages/'),
        data_root='data/VOCdevkit/',
        metainfo=dict(classes=[
            'aeroplane',
            'bicycle',
            'bird',
            'boat',
            'bottle',
            'bus',
            'car',
            'cat',
            'chair',
            'cow',
            'diningtable',
            'dog',
            'horse',
            'motorbike',
            'person',
            'pottedplant',
            'sheep',
            'sofa',
            'train',
            'tvmonitor',
        ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/coco/voc07_test.json',
    format_only=False,
    metric='bbox',
    outfile_prefix='./work_dirs/sparse-rcnn_r50_fpn_ms-480-800-3x_coco/test',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=36, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        ann_file='data/coco/voc07_train.json',
        backend_args=None,
        data_prefix=dict(img='VOC2007/JPEGImages/'),
        data_root='data/VOCdevkit/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(classes=[
            'aeroplane',
            'bicycle',
            'bird',
            'boat',
            'bottle',
            'bus',
            'car',
            'cat',
            'chair',
            'cow',
            'diningtable',
            'dog',
            'horse',
            'motorbike',
            'person',
            'pottedplant',
            'sheep',
            'sofa',
            'train',
            'tvmonitor',
        ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                keep_ratio=True,
                scales=[
                    (
                        480,
                        1333,
                    ),
                    (
                        512,
                        1333,
                    ),
                    (
                        544,
                        1333,
                    ),
                    (
                        576,
                        1333,
                    ),
                    (
                        608,
                        1333,
                    ),
                    (
                        640,
                        1333,
                    ),
                    (
                        672,
                        1333,
                    ),
                    (
                        704,
                        1333,
                    ),
                    (
                        736,
                        1333,
                    ),
                    (
                        768,
                        1333,
                    ),
                    (
                        800,
                        1333,
                    ),
                ],
                type='RandomChoiceResize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        keep_ratio=True,
        scales=[
            (
                480,
                1333,
            ),
            (
                512,
                1333,
            ),
            (
                544,
                1333,
            ),
            (
                576,
                1333,
            ),
            (
                608,
                1333,
            ),
            (
                640,
                1333,
            ),
            (
                672,
                1333,
            ),
            (
                704,
                1333,
            ),
            (
                736,
                1333,
            ),
            (
                768,
                1333,
            ),
            (
                800,
                1333,
            ),
        ],
        type='RandomChoiceResize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='data/coco/voc07_val.json',
        backend_args=None,
        data_prefix=dict(img='VOC2007/JPEGImages/'),
        data_root='data/VOCdevkit/',
        metainfo=dict(classes=[
            'aeroplane',
            'bicycle',
            'bird',
            'boat',
            'bottle',
            'bus',
            'car',
            'cat',
            'chair',
            'cow',
            'diningtable',
            'dog',
            'horse',
            'motorbike',
            'person',
            'pottedplant',
            'sheep',
            'sofa',
            'train',
            'tvmonitor',
        ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/coco/voc07_val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
    dict(type='TensorboardVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='TensorboardVisBackend'),
    ])
work_dir = './work_dirs/sparse-rcnn_r50_fpn_ms-480-800-3x_coco'

2025/05/27 10:57:51 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/27 10:57:51 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/27 10:57:56 - mmengine - INFO - Load checkpoint from work_dirs/sparse-rcnn_r50_fpn_ms-480-800-3x_coco/epoch_36.pth
2025/05/27 10:58:01 - mmengine - INFO - Epoch(test) [  50/4952]    eta: 0:07:20  time: 0.0899  data_time: 0.0106  memory: 740  
2025/05/27 10:58:03 - mmengine - INFO - Epoch(test) [ 100/4952]    eta: 0:05:52  time: 0.0552  data_time: 0.0025  memory: 765  
2025/05/27 10:58:06 - mmengine - INFO - Epoch(test) [ 150/4952]    eta: 0:05:21  time: 0.0556  data_time: 0.0024  memory: 740  
2025/05/27 10:58:09 - mmengine - INFO - Epoch(test) [ 200/4952]    eta: 0:05:03  time: 0.0545  data_time: 0.0025  memory: 732  
2025/05/27 10:58:12 - mmengine - INFO - Epoch(test) [ 250/4952]    eta: 0:04:57  time: 0.0614  data_time: 0.0040  memory: 765  
2025/05/27 10:58:15 - mmengine - INFO - Epoch(test) [ 300/4952]    eta: 0:04:52  time: 0.0607  data_time: 0.0036  memory: 756  
2025/05/27 10:58:18 - mmengine - INFO - Epoch(test) [ 350/4952]    eta: 0:04:42  time: 0.0530  data_time: 0.0028  memory: 765  
2025/05/27 10:58:20 - mmengine - INFO - Epoch(test) [ 400/4952]    eta: 0:04:34  time: 0.0516  data_time: 0.0023  memory: 765  
2025/05/27 10:58:23 - mmengine - INFO - Epoch(test) [ 450/4952]    eta: 0:04:27  time: 0.0531  data_time: 0.0023  memory: 751  
2025/05/27 10:58:26 - mmengine - INFO - Epoch(test) [ 500/4952]    eta: 0:04:23  time: 0.0567  data_time: 0.0033  memory: 740  
2025/05/27 10:58:28 - mmengine - INFO - Epoch(test) [ 550/4952]    eta: 0:04:17  time: 0.0527  data_time: 0.0031  memory: 756  
2025/05/27 10:58:31 - mmengine - INFO - Epoch(test) [ 600/4952]    eta: 0:04:12  time: 0.0504  data_time: 0.0022  memory: 747  
2025/05/27 10:58:34 - mmengine - INFO - Epoch(test) [ 650/4952]    eta: 0:04:06  time: 0.0502  data_time: 0.0022  memory: 756  
2025/05/27 10:58:36 - mmengine - INFO - Epoch(test) [ 700/4952]    eta: 0:04:01  time: 0.0503  data_time: 0.0023  memory: 747  
2025/05/27 10:58:39 - mmengine - INFO - Epoch(test) [ 750/4952]    eta: 0:03:56  time: 0.0503  data_time: 0.0022  memory: 756  
2025/05/27 10:58:41 - mmengine - INFO - Epoch(test) [ 800/4952]    eta: 0:03:52  time: 0.0502  data_time: 0.0022  memory: 747  
2025/05/27 10:58:44 - mmengine - INFO - Epoch(test) [ 850/4952]    eta: 0:03:48  time: 0.0507  data_time: 0.0023  memory: 751  
2025/05/27 10:58:46 - mmengine - INFO - Epoch(test) [ 900/4952]    eta: 0:03:45  time: 0.0532  data_time: 0.0024  memory: 765  
2025/05/27 10:58:49 - mmengine - INFO - Epoch(test) [ 950/4952]    eta: 0:03:41  time: 0.0513  data_time: 0.0022  memory: 756  
2025/05/27 10:58:51 - mmengine - INFO - Epoch(test) [1000/4952]    eta: 0:03:37  time: 0.0509  data_time: 0.0025  memory: 765  
2025/05/27 10:58:54 - mmengine - INFO - Epoch(test) [1050/4952]    eta: 0:03:34  time: 0.0530  data_time: 0.0035  memory: 765  
2025/05/27 10:58:57 - mmengine - INFO - Epoch(test) [1100/4952]    eta: 0:03:31  time: 0.0524  data_time: 0.0022  memory: 751  
2025/05/27 10:58:59 - mmengine - INFO - Epoch(test) [1150/4952]    eta: 0:03:28  time: 0.0536  data_time: 0.0023  memory: 765  
2025/05/27 10:59:02 - mmengine - INFO - Epoch(test) [1200/4952]    eta: 0:03:25  time: 0.0517  data_time: 0.0021  memory: 756  
2025/05/27 10:59:05 - mmengine - INFO - Epoch(test) [1250/4952]    eta: 0:03:22  time: 0.0518  data_time: 0.0021  memory: 751  
2025/05/27 10:59:07 - mmengine - INFO - Epoch(test) [1300/4952]    eta: 0:03:19  time: 0.0528  data_time: 0.0022  memory: 751  
2025/05/27 10:59:10 - mmengine - INFO - Epoch(test) [1350/4952]    eta: 0:03:15  time: 0.0507  data_time: 0.0021  memory: 765  
2025/05/27 10:59:12 - mmengine - INFO - Epoch(test) [1400/4952]    eta: 0:03:12  time: 0.0511  data_time: 0.0021  memory: 747  
2025/05/27 10:59:15 - mmengine - INFO - Epoch(test) [1450/4952]    eta: 0:03:09  time: 0.0538  data_time: 0.0023  memory: 765  
2025/05/27 10:59:18 - mmengine - INFO - Epoch(test) [1500/4952]    eta: 0:03:07  time: 0.0547  data_time: 0.0026  memory: 756  
2025/05/27 10:59:20 - mmengine - INFO - Epoch(test) [1550/4952]    eta: 0:03:04  time: 0.0514  data_time: 0.0022  memory: 751  
2025/05/27 10:59:23 - mmengine - INFO - Epoch(test) [1600/4952]    eta: 0:03:01  time: 0.0520  data_time: 0.0022  memory: 765  
2025/05/27 10:59:26 - mmengine - INFO - Epoch(test) [1650/4952]    eta: 0:02:58  time: 0.0542  data_time: 0.0041  memory: 751  
2025/05/27 10:59:28 - mmengine - INFO - Epoch(test) [1700/4952]    eta: 0:02:55  time: 0.0539  data_time: 0.0042  memory: 780  
2025/05/27 10:59:31 - mmengine - INFO - Epoch(test) [1750/4952]    eta: 0:02:53  time: 0.0529  data_time: 0.0021  memory: 732  
2025/05/27 10:59:34 - mmengine - INFO - Epoch(test) [1800/4952]    eta: 0:02:50  time: 0.0553  data_time: 0.0024  memory: 732  
2025/05/27 10:59:36 - mmengine - INFO - Epoch(test) [1850/4952]    eta: 0:02:47  time: 0.0511  data_time: 0.0028  memory: 740  
2025/05/27 10:59:39 - mmengine - INFO - Epoch(test) [1900/4952]    eta: 0:02:44  time: 0.0554  data_time: 0.0038  memory: 747  
2025/05/27 10:59:42 - mmengine - INFO - Epoch(test) [1950/4952]    eta: 0:02:42  time: 0.0519  data_time: 0.0022  memory: 756  
2025/05/27 10:59:44 - mmengine - INFO - Epoch(test) [2000/4952]    eta: 0:02:39  time: 0.0508  data_time: 0.0021  memory: 747  
2025/05/27 10:59:47 - mmengine - INFO - Epoch(test) [2050/4952]    eta: 0:02:36  time: 0.0517  data_time: 0.0021  memory: 765  
2025/05/27 10:59:50 - mmengine - INFO - Epoch(test) [2100/4952]    eta: 0:02:33  time: 0.0555  data_time: 0.0033  memory: 751  
2025/05/27 10:59:52 - mmengine - INFO - Epoch(test) [2150/4952]    eta: 0:02:30  time: 0.0513  data_time: 0.0022  memory: 756  
2025/05/27 10:59:55 - mmengine - INFO - Epoch(test) [2200/4952]    eta: 0:02:28  time: 0.0527  data_time: 0.0031  memory: 747  
2025/05/27 10:59:57 - mmengine - INFO - Epoch(test) [2250/4952]    eta: 0:02:25  time: 0.0537  data_time: 0.0031  memory: 765  
2025/05/27 11:00:00 - mmengine - INFO - Epoch(test) [2300/4952]    eta: 0:02:22  time: 0.0559  data_time: 0.0024  memory: 751  
2025/05/27 11:00:03 - mmengine - INFO - Epoch(test) [2350/4952]    eta: 0:02:20  time: 0.0513  data_time: 0.0021  memory: 740  
2025/05/27 11:00:06 - mmengine - INFO - Epoch(test) [2400/4952]    eta: 0:02:17  time: 0.0590  data_time: 0.0026  memory: 751  
2025/05/27 11:00:08 - mmengine - INFO - Epoch(test) [2450/4952]    eta: 0:02:14  time: 0.0539  data_time: 0.0039  memory: 751  
2025/05/27 11:00:11 - mmengine - INFO - Epoch(test) [2500/4952]    eta: 0:02:12  time: 0.0508  data_time: 0.0021  memory: 765  
2025/05/27 11:00:14 - mmengine - INFO - Epoch(test) [2550/4952]    eta: 0:02:09  time: 0.0533  data_time: 0.0028  memory: 732  
2025/05/27 11:00:16 - mmengine - INFO - Epoch(test) [2600/4952]    eta: 0:02:06  time: 0.0526  data_time: 0.0022  memory: 756  
2025/05/27 11:00:19 - mmengine - INFO - Epoch(test) [2650/4952]    eta: 0:02:03  time: 0.0546  data_time: 0.0032  memory: 756  
2025/05/27 11:00:22 - mmengine - INFO - Epoch(test) [2700/4952]    eta: 0:02:01  time: 0.0525  data_time: 0.0022  memory: 765  
2025/05/27 11:00:24 - mmengine - INFO - Epoch(test) [2750/4952]    eta: 0:01:58  time: 0.0550  data_time: 0.0053  memory: 747  
2025/05/27 11:00:27 - mmengine - INFO - Epoch(test) [2800/4952]    eta: 0:01:55  time: 0.0511  data_time: 0.0022  memory: 751  
2025/05/27 11:00:30 - mmengine - INFO - Epoch(test) [2850/4952]    eta: 0:01:53  time: 0.0541  data_time: 0.0023  memory: 751  
2025/05/27 11:00:32 - mmengine - INFO - Epoch(test) [2900/4952]    eta: 0:01:50  time: 0.0543  data_time: 0.0034  memory: 756  
2025/05/27 11:00:35 - mmengine - INFO - Epoch(test) [2950/4952]    eta: 0:01:47  time: 0.0518  data_time: 0.0031  memory: 765  
2025/05/27 11:00:38 - mmengine - INFO - Epoch(test) [3000/4952]    eta: 0:01:44  time: 0.0516  data_time: 0.0030  memory: 735  
2025/05/27 11:00:40 - mmengine - INFO - Epoch(test) [3050/4952]    eta: 0:01:42  time: 0.0528  data_time: 0.0022  memory: 751  
2025/05/27 11:00:43 - mmengine - INFO - Epoch(test) [3100/4952]    eta: 0:01:39  time: 0.0508  data_time: 0.0021  memory: 765  
2025/05/27 11:00:45 - mmengine - INFO - Epoch(test) [3150/4952]    eta: 0:01:36  time: 0.0508  data_time: 0.0022  memory: 751  
2025/05/27 11:00:48 - mmengine - INFO - Epoch(test) [3200/4952]    eta: 0:01:33  time: 0.0525  data_time: 0.0030  memory: 751  
2025/05/27 11:00:51 - mmengine - INFO - Epoch(test) [3250/4952]    eta: 0:01:31  time: 0.0525  data_time: 0.0029  memory: 751  
2025/05/27 11:00:53 - mmengine - INFO - Epoch(test) [3300/4952]    eta: 0:01:28  time: 0.0537  data_time: 0.0027  memory: 747  
2025/05/27 11:00:56 - mmengine - INFO - Epoch(test) [3350/4952]    eta: 0:01:25  time: 0.0522  data_time: 0.0022  memory: 751  
2025/05/27 11:00:59 - mmengine - INFO - Epoch(test) [3400/4952]    eta: 0:01:23  time: 0.0547  data_time: 0.0027  memory: 765  
2025/05/27 11:01:01 - mmengine - INFO - Epoch(test) [3450/4952]    eta: 0:01:20  time: 0.0538  data_time: 0.0023  memory: 740  
2025/05/27 11:01:04 - mmengine - INFO - Epoch(test) [3500/4952]    eta: 0:01:17  time: 0.0519  data_time: 0.0029  memory: 751  
2025/05/27 11:01:06 - mmengine - INFO - Epoch(test) [3550/4952]    eta: 0:01:15  time: 0.0507  data_time: 0.0021  memory: 732  
2025/05/27 11:01:09 - mmengine - INFO - Epoch(test) [3600/4952]    eta: 0:01:12  time: 0.0530  data_time: 0.0022  memory: 765  
2025/05/27 11:01:12 - mmengine - INFO - Epoch(test) [3650/4952]    eta: 0:01:09  time: 0.0518  data_time: 0.0021  memory: 765  
2025/05/27 11:01:14 - mmengine - INFO - Epoch(test) [3700/4952]    eta: 0:01:06  time: 0.0528  data_time: 0.0023  memory: 740  
2025/05/27 11:01:17 - mmengine - INFO - Epoch(test) [3750/4952]    eta: 0:01:04  time: 0.0505  data_time: 0.0021  memory: 751  
2025/05/27 11:01:19 - mmengine - INFO - Epoch(test) [3800/4952]    eta: 0:01:01  time: 0.0506  data_time: 0.0021  memory: 751  
2025/05/27 11:01:22 - mmengine - INFO - Epoch(test) [3850/4952]    eta: 0:00:58  time: 0.0512  data_time: 0.0021  memory: 747  
2025/05/27 11:01:24 - mmengine - INFO - Epoch(test) [3900/4952]    eta: 0:00:56  time: 0.0507  data_time: 0.0022  memory: 751  
2025/05/27 11:01:27 - mmengine - INFO - Epoch(test) [3950/4952]    eta: 0:00:53  time: 0.0505  data_time: 0.0021  memory: 740  
2025/05/27 11:01:30 - mmengine - INFO - Epoch(test) [4000/4952]    eta: 0:00:50  time: 0.0519  data_time: 0.0022  memory: 765  
2025/05/27 11:01:32 - mmengine - INFO - Epoch(test) [4050/4952]    eta: 0:00:48  time: 0.0509  data_time: 0.0021  memory: 756  
2025/05/27 11:01:35 - mmengine - INFO - Epoch(test) [4100/4952]    eta: 0:00:45  time: 0.0504  data_time: 0.0021  memory: 765  
2025/05/27 11:01:37 - mmengine - INFO - Epoch(test) [4150/4952]    eta: 0:00:42  time: 0.0518  data_time: 0.0022  memory: 765  
2025/05/27 11:01:40 - mmengine - INFO - Epoch(test) [4200/4952]    eta: 0:00:40  time: 0.0538  data_time: 0.0042  memory: 740  
2025/05/27 11:01:42 - mmengine - INFO - Epoch(test) [4250/4952]    eta: 0:00:37  time: 0.0508  data_time: 0.0021  memory: 765  
2025/05/27 11:01:45 - mmengine - INFO - Epoch(test) [4300/4952]    eta: 0:00:34  time: 0.0524  data_time: 0.0023  memory: 780  
2025/05/27 11:01:48 - mmengine - INFO - Epoch(test) [4350/4952]    eta: 0:00:31  time: 0.0508  data_time: 0.0021  memory: 765  
2025/05/27 11:01:50 - mmengine - INFO - Epoch(test) [4400/4952]    eta: 0:00:29  time: 0.0508  data_time: 0.0022  memory: 740  
2025/05/27 11:01:53 - mmengine - INFO - Epoch(test) [4450/4952]    eta: 0:00:26  time: 0.0516  data_time: 0.0027  memory: 740  
2025/05/27 11:01:55 - mmengine - INFO - Epoch(test) [4500/4952]    eta: 0:00:23  time: 0.0521  data_time: 0.0025  memory: 751  
2025/05/27 11:01:58 - mmengine - INFO - Epoch(test) [4550/4952]    eta: 0:00:21  time: 0.0509  data_time: 0.0021  memory: 765  
2025/05/27 11:02:00 - mmengine - INFO - Epoch(test) [4600/4952]    eta: 0:00:18  time: 0.0505  data_time: 0.0021  memory: 740  
2025/05/27 11:02:03 - mmengine - INFO - Epoch(test) [4650/4952]    eta: 0:00:16  time: 0.0506  data_time: 0.0021  memory: 747  
2025/05/27 11:02:05 - mmengine - INFO - Epoch(test) [4700/4952]    eta: 0:00:13  time: 0.0508  data_time: 0.0021  memory: 765  
2025/05/27 11:02:08 - mmengine - INFO - Epoch(test) [4750/4952]    eta: 0:00:10  time: 0.0518  data_time: 0.0021  memory: 751  
2025/05/27 11:02:11 - mmengine - INFO - Epoch(test) [4800/4952]    eta: 0:00:08  time: 0.0510  data_time: 0.0023  memory: 732  
2025/05/27 11:02:13 - mmengine - INFO - Epoch(test) [4850/4952]    eta: 0:00:05  time: 0.0508  data_time: 0.0021  memory: 756  
2025/05/27 11:02:16 - mmengine - INFO - Epoch(test) [4900/4952]    eta: 0:00:02  time: 0.0506  data_time: 0.0021  memory: 747  
2025/05/27 11:02:18 - mmengine - INFO - Epoch(test) [4950/4952]    eta: 0:00:00  time: 0.0507  data_time: 0.0021  memory: 756  
2025/05/27 11:02:27 - mmengine - INFO - Evaluating bbox...
2025/05/27 11:03:10 - mmengine - INFO - bbox_mAP_copypaste: 0.331 0.534 0.346 0.060 0.199 0.412
2025/05/27 11:03:11 - mmengine - INFO - Epoch(test) [4952/4952]    coco/bbox_mAP: 0.3310  coco/bbox_mAP_50: 0.5340  coco/bbox_mAP_75: 0.3460  coco/bbox_mAP_s: 0.0600  coco/bbox_mAP_m: 0.1990  coco/bbox_mAP_l: 0.4120  data_time: 0.0026  time: 0.0529
