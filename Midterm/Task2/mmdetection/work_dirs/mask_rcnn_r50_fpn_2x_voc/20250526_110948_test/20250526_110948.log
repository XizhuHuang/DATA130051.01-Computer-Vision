2025/05/26 11:09:49 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1890982751
    GPU 0,1,2,3,4: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
    PyTorch: 1.11.0
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.12.0
    OpenCV: 4.11.0
    MMEngine: 0.10.7

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1890982751
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/26 11:09:49 - mmengine - INFO - Config:
VOC_classes = [
    'aeroplane',
    'bicycle',
    'bird',
    'boat',
    'bottle',
    'bus',
    'car',
    'cat',
    'chair',
    'cow',
    'diningtable',
    'dog',
    'horse',
    'motorbike',
    'person',
    'pottedplant',
    'sheep',
    'sofa',
    'train',
    'tvmonitor',
]
auto_scale_lr = dict(base_batch_size=16, enable=False)
data_root = 'data/VOCdevkit/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'work_dirs/mask_rcnn_r50_fpn_1x_voc_lowmem/epoch_24.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_mask=True,
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=20,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        mask_head=None,
        mask_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=14, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            mask_thr_binary=0.5,
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            mask_size=28,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='MaskRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.0025, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=24,
        gamma=0.1,
        milestones=[
            16,
            22,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='data/coco/voc07_test.json',
        data_prefix=dict(img='VOC2007/JPEGImages/'),
        data_root='data/VOCdevkit/',
        metainfo=dict(classes=[
            'aeroplane',
            'bicycle',
            'bird',
            'boat',
            'bottle',
            'bus',
            'car',
            'cat',
            'chair',
            'cow',
            'diningtable',
            'dog',
            'horse',
            'motorbike',
            'person',
            'pottedplant',
            'sheep',
            'sofa',
            'train',
            'tvmonitor',
        ]),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                640,
                480,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2)
test_evaluator = dict(
    ann_file='data/coco/voc07_test.json', metric=[
        'bbox',
    ], type='CocoMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        640,
        480,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='PackDetInputs'),
]
train_cfg = dict(max_epochs=24, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='data/coco/voc07_train.json',
        data_prefix=dict(img='VOC2007/JPEGImages/'),
        data_root='data/VOCdevkit/',
        metainfo=dict(classes=[
            'aeroplane',
            'bicycle',
            'bird',
            'boat',
            'bottle',
            'bus',
            'car',
            'cat',
            'chair',
            'cow',
            'diningtable',
            'dog',
            'horse',
            'motorbike',
            'person',
            'pottedplant',
            'sheep',
            'sofa',
            'train',
            'tvmonitor',
        ]),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                640,
                480,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        640,
        480,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='data/coco/voc07_val.json',
        data_prefix=dict(img='VOC2007/JPEGImages/'),
        data_root='data/VOCdevkit/',
        metainfo=dict(classes=[
            'aeroplane',
            'bicycle',
            'bird',
            'boat',
            'bottle',
            'bus',
            'car',
            'cat',
            'chair',
            'cow',
            'diningtable',
            'dog',
            'horse',
            'motorbike',
            'person',
            'pottedplant',
            'sheep',
            'sofa',
            'train',
            'tvmonitor',
        ]),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                640,
                480,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2)
val_evaluator = dict(
    ann_file='data/coco/voc07_val.json', metric=[
        'bbox',
    ], type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
    dict(type='TensorboardVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='TensorboardVisBackend'),
    ])
work_dir = './work_dirs/mask_rcnn_r50_fpn_1x_voc_lowmem'

2025/05/26 11:09:56 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/26 11:09:56 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/05/26 11:09:58 - mmengine - INFO - Load checkpoint from work_dirs/mask_rcnn_r50_fpn_1x_voc_lowmem/epoch_24.pth
2025/05/26 11:10:01 - mmengine - INFO - Epoch(test) [  50/4952]    eta: 0:05:11  time: 0.0636  data_time: 0.0100  memory: 285  
2025/05/26 11:10:03 - mmengine - INFO - Epoch(test) [ 100/4952]    eta: 0:03:53  time: 0.0326  data_time: 0.0024  memory: 286  
2025/05/26 11:10:04 - mmengine - INFO - Epoch(test) [ 150/4952]    eta: 0:03:21  time: 0.0297  data_time: 0.0021  memory: 285  
2025/05/26 11:10:06 - mmengine - INFO - Epoch(test) [ 200/4952]    eta: 0:03:01  time: 0.0269  data_time: 0.0017  memory: 285  
2025/05/26 11:10:07 - mmengine - INFO - Epoch(test) [ 250/4952]    eta: 0:02:48  time: 0.0269  data_time: 0.0017  memory: 285  
2025/05/26 11:10:08 - mmengine - INFO - Epoch(test) [ 300/4952]    eta: 0:02:40  time: 0.0273  data_time: 0.0017  memory: 285  
2025/05/26 11:10:10 - mmengine - INFO - Epoch(test) [ 350/4952]    eta: 0:02:33  time: 0.0271  data_time: 0.0017  memory: 285  
2025/05/26 11:10:11 - mmengine - INFO - Epoch(test) [ 400/4952]    eta: 0:02:28  time: 0.0267  data_time: 0.0016  memory: 284  
2025/05/26 11:10:12 - mmengine - INFO - Epoch(test) [ 450/4952]    eta: 0:02:23  time: 0.0269  data_time: 0.0016  memory: 285  
2025/05/26 11:10:14 - mmengine - INFO - Epoch(test) [ 500/4952]    eta: 0:02:20  time: 0.0269  data_time: 0.0017  memory: 285  
2025/05/26 11:10:15 - mmengine - INFO - Epoch(test) [ 550/4952]    eta: 0:02:16  time: 0.0267  data_time: 0.0016  memory: 284  
2025/05/26 11:10:16 - mmengine - INFO - Epoch(test) [ 600/4952]    eta: 0:02:13  time: 0.0269  data_time: 0.0016  memory: 285  
2025/05/26 11:10:18 - mmengine - INFO - Epoch(test) [ 650/4952]    eta: 0:02:10  time: 0.0269  data_time: 0.0017  memory: 285  
2025/05/26 11:10:19 - mmengine - INFO - Epoch(test) [ 700/4952]    eta: 0:02:08  time: 0.0284  data_time: 0.0018  memory: 284  
2025/05/26 11:10:21 - mmengine - INFO - Epoch(test) [ 750/4952]    eta: 0:02:06  time: 0.0267  data_time: 0.0016  memory: 286  
2025/05/26 11:10:22 - mmengine - INFO - Epoch(test) [ 800/4952]    eta: 0:02:03  time: 0.0269  data_time: 0.0016  memory: 286  
2025/05/26 11:10:23 - mmengine - INFO - Epoch(test) [ 850/4952]    eta: 0:02:01  time: 0.0268  data_time: 0.0016  memory: 286  
2025/05/26 11:10:25 - mmengine - INFO - Epoch(test) [ 900/4952]    eta: 0:01:59  time: 0.0269  data_time: 0.0016  memory: 285  
2025/05/26 11:10:26 - mmengine - INFO - Epoch(test) [ 950/4952]    eta: 0:01:57  time: 0.0282  data_time: 0.0018  memory: 284  
2025/05/26 11:10:27 - mmengine - INFO - Epoch(test) [1000/4952]    eta: 0:01:55  time: 0.0269  data_time: 0.0017  memory: 285  
2025/05/26 11:10:29 - mmengine - INFO - Epoch(test) [1050/4952]    eta: 0:01:53  time: 0.0269  data_time: 0.0017  memory: 284  
2025/05/26 11:10:30 - mmengine - INFO - Epoch(test) [1100/4952]    eta: 0:01:51  time: 0.0269  data_time: 0.0017  memory: 285  
2025/05/26 11:10:31 - mmengine - INFO - Epoch(test) [1150/4952]    eta: 0:01:50  time: 0.0268  data_time: 0.0017  memory: 284  
2025/05/26 11:10:33 - mmengine - INFO - Epoch(test) [1200/4952]    eta: 0:01:48  time: 0.0268  data_time: 0.0016  memory: 286  
2025/05/26 11:10:34 - mmengine - INFO - Epoch(test) [1250/4952]    eta: 0:01:46  time: 0.0286  data_time: 0.0028  memory: 286  
2025/05/26 11:10:36 - mmengine - INFO - Epoch(test) [1300/4952]    eta: 0:01:46  time: 0.0343  data_time: 0.0021  memory: 285  
2025/05/26 11:10:38 - mmengine - INFO - Epoch(test) [1350/4952]    eta: 0:01:45  time: 0.0340  data_time: 0.0021  memory: 286  
2025/05/26 11:10:39 - mmengine - INFO - Epoch(test) [1400/4952]    eta: 0:01:44  time: 0.0339  data_time: 0.0021  memory: 285  
2025/05/26 11:10:41 - mmengine - INFO - Epoch(test) [1450/4952]    eta: 0:01:43  time: 0.0354  data_time: 0.0025  memory: 284  
2025/05/26 11:10:43 - mmengine - INFO - Epoch(test) [1500/4952]    eta: 0:01:42  time: 0.0353  data_time: 0.0028  memory: 284  
2025/05/26 11:10:44 - mmengine - INFO - Epoch(test) [1550/4952]    eta: 0:01:41  time: 0.0267  data_time: 0.0017  memory: 285  
2025/05/26 11:10:46 - mmengine - INFO - Epoch(test) [1600/4952]    eta: 0:01:39  time: 0.0264  data_time: 0.0017  memory: 285  
2025/05/26 11:10:47 - mmengine - INFO - Epoch(test) [1650/4952]    eta: 0:01:37  time: 0.0277  data_time: 0.0018  memory: 286  
2025/05/26 11:10:48 - mmengine - INFO - Epoch(test) [1700/4952]    eta: 0:01:35  time: 0.0280  data_time: 0.0017  memory: 286  
2025/05/26 11:10:50 - mmengine - INFO - Epoch(test) [1750/4952]    eta: 0:01:34  time: 0.0268  data_time: 0.0017  memory: 285  
2025/05/26 11:10:51 - mmengine - INFO - Epoch(test) [1800/4952]    eta: 0:01:32  time: 0.0270  data_time: 0.0017  memory: 285  
2025/05/26 11:10:52 - mmengine - INFO - Epoch(test) [1850/4952]    eta: 0:01:31  time: 0.0291  data_time: 0.0029  memory: 284  
2025/05/26 11:10:54 - mmengine - INFO - Epoch(test) [1900/4952]    eta: 0:01:29  time: 0.0263  data_time: 0.0016  memory: 284  
2025/05/26 11:10:55 - mmengine - INFO - Epoch(test) [1950/4952]    eta: 0:01:27  time: 0.0270  data_time: 0.0017  memory: 284  
2025/05/26 11:10:57 - mmengine - INFO - Epoch(test) [2000/4952]    eta: 0:01:26  time: 0.0283  data_time: 0.0017  memory: 286  
2025/05/26 11:10:58 - mmengine - INFO - Epoch(test) [2050/4952]    eta: 0:01:25  time: 0.0335  data_time: 0.0020  memory: 285  
2025/05/26 11:11:00 - mmengine - INFO - Epoch(test) [2100/4952]    eta: 0:01:23  time: 0.0338  data_time: 0.0021  memory: 285  
2025/05/26 11:11:02 - mmengine - INFO - Epoch(test) [2150/4952]    eta: 0:01:22  time: 0.0337  data_time: 0.0020  memory: 285  
2025/05/26 11:11:03 - mmengine - INFO - Epoch(test) [2200/4952]    eta: 0:01:21  time: 0.0339  data_time: 0.0020  memory: 285  
2025/05/26 11:11:05 - mmengine - INFO - Epoch(test) [2250/4952]    eta: 0:01:20  time: 0.0337  data_time: 0.0020  memory: 284  
2025/05/26 11:11:07 - mmengine - INFO - Epoch(test) [2300/4952]    eta: 0:01:19  time: 0.0339  data_time: 0.0021  memory: 284  
2025/05/26 11:11:08 - mmengine - INFO - Epoch(test) [2350/4952]    eta: 0:01:17  time: 0.0338  data_time: 0.0021  memory: 285  
2025/05/26 11:11:10 - mmengine - INFO - Epoch(test) [2400/4952]    eta: 0:01:16  time: 0.0341  data_time: 0.0021  memory: 285  
2025/05/26 11:11:12 - mmengine - INFO - Epoch(test) [2450/4952]    eta: 0:01:15  time: 0.0341  data_time: 0.0021  memory: 285  
2025/05/26 11:11:13 - mmengine - INFO - Epoch(test) [2500/4952]    eta: 0:01:13  time: 0.0340  data_time: 0.0021  memory: 285  
2025/05/26 11:11:15 - mmengine - INFO - Epoch(test) [2550/4952]    eta: 0:01:12  time: 0.0345  data_time: 0.0026  memory: 286  
2025/05/26 11:11:17 - mmengine - INFO - Epoch(test) [2600/4952]    eta: 0:01:11  time: 0.0341  data_time: 0.0021  memory: 285  
2025/05/26 11:11:19 - mmengine - INFO - Epoch(test) [2650/4952]    eta: 0:01:09  time: 0.0342  data_time: 0.0022  memory: 284  
2025/05/26 11:11:20 - mmengine - INFO - Epoch(test) [2700/4952]    eta: 0:01:08  time: 0.0342  data_time: 0.0021  memory: 285  
2025/05/26 11:11:22 - mmengine - INFO - Epoch(test) [2750/4952]    eta: 0:01:07  time: 0.0342  data_time: 0.0021  memory: 284  
2025/05/26 11:11:24 - mmengine - INFO - Epoch(test) [2800/4952]    eta: 0:01:05  time: 0.0341  data_time: 0.0020  memory: 284  
2025/05/26 11:11:25 - mmengine - INFO - Epoch(test) [2850/4952]    eta: 0:01:04  time: 0.0342  data_time: 0.0022  memory: 285  
2025/05/26 11:11:27 - mmengine - INFO - Epoch(test) [2900/4952]    eta: 0:01:02  time: 0.0317  data_time: 0.0019  memory: 286  
2025/05/26 11:11:29 - mmengine - INFO - Epoch(test) [2950/4952]    eta: 0:01:01  time: 0.0347  data_time: 0.0031  memory: 285  
2025/05/26 11:11:31 - mmengine - INFO - Epoch(test) [3000/4952]    eta: 0:01:00  time: 0.0341  data_time: 0.0021  memory: 285  
2025/05/26 11:11:32 - mmengine - INFO - Epoch(test) [3050/4952]    eta: 0:00:58  time: 0.0340  data_time: 0.0021  memory: 285  
2025/05/26 11:11:34 - mmengine - INFO - Epoch(test) [3100/4952]    eta: 0:00:56  time: 0.0266  data_time: 0.0016  memory: 286  
2025/05/26 11:11:35 - mmengine - INFO - Epoch(test) [3150/4952]    eta: 0:00:55  time: 0.0262  data_time: 0.0016  memory: 284  
2025/05/26 11:11:36 - mmengine - INFO - Epoch(test) [3200/4952]    eta: 0:00:53  time: 0.0263  data_time: 0.0018  memory: 286  
2025/05/26 11:11:37 - mmengine - INFO - Epoch(test) [3250/4952]    eta: 0:00:51  time: 0.0264  data_time: 0.0017  memory: 286  
2025/05/26 11:11:39 - mmengine - INFO - Epoch(test) [3300/4952]    eta: 0:00:50  time: 0.0302  data_time: 0.0018  memory: 285  
2025/05/26 11:11:40 - mmengine - INFO - Epoch(test) [3350/4952]    eta: 0:00:48  time: 0.0276  data_time: 0.0017  memory: 285  
2025/05/26 11:11:42 - mmengine - INFO - Epoch(test) [3400/4952]    eta: 0:00:47  time: 0.0265  data_time: 0.0016  memory: 286  
2025/05/26 11:11:43 - mmengine - INFO - Epoch(test) [3450/4952]    eta: 0:00:45  time: 0.0264  data_time: 0.0017  memory: 285  
2025/05/26 11:11:44 - mmengine - INFO - Epoch(test) [3500/4952]    eta: 0:00:44  time: 0.0264  data_time: 0.0017  memory: 286  
2025/05/26 11:11:46 - mmengine - INFO - Epoch(test) [3550/4952]    eta: 0:00:42  time: 0.0337  data_time: 0.0020  memory: 285  
2025/05/26 11:11:48 - mmengine - INFO - Epoch(test) [3600/4952]    eta: 0:00:41  time: 0.0304  data_time: 0.0019  memory: 284  
2025/05/26 11:11:49 - mmengine - INFO - Epoch(test) [3650/4952]    eta: 0:00:39  time: 0.0263  data_time: 0.0017  memory: 285  
2025/05/26 11:11:50 - mmengine - INFO - Epoch(test) [3700/4952]    eta: 0:00:37  time: 0.0263  data_time: 0.0016  memory: 285  
2025/05/26 11:11:52 - mmengine - INFO - Epoch(test) [3750/4952]    eta: 0:00:36  time: 0.0263  data_time: 0.0016  memory: 285  
2025/05/26 11:11:53 - mmengine - INFO - Epoch(test) [3800/4952]    eta: 0:00:34  time: 0.0263  data_time: 0.0016  memory: 285  
2025/05/26 11:11:54 - mmengine - INFO - Epoch(test) [3850/4952]    eta: 0:00:33  time: 0.0265  data_time: 0.0016  memory: 285  
2025/05/26 11:11:55 - mmengine - INFO - Epoch(test) [3900/4952]    eta: 0:00:31  time: 0.0263  data_time: 0.0017  memory: 285  
2025/05/26 11:11:57 - mmengine - INFO - Epoch(test) [3950/4952]    eta: 0:00:30  time: 0.0264  data_time: 0.0017  memory: 285  
2025/05/26 11:11:58 - mmengine - INFO - Epoch(test) [4000/4952]    eta: 0:00:28  time: 0.0269  data_time: 0.0017  memory: 284  
2025/05/26 11:12:00 - mmengine - INFO - Epoch(test) [4050/4952]    eta: 0:00:27  time: 0.0324  data_time: 0.0020  memory: 284  
2025/05/26 11:12:01 - mmengine - INFO - Epoch(test) [4100/4952]    eta: 0:00:25  time: 0.0340  data_time: 0.0021  memory: 285  
2025/05/26 11:12:03 - mmengine - INFO - Epoch(test) [4150/4952]    eta: 0:00:24  time: 0.0343  data_time: 0.0022  memory: 285  
2025/05/26 11:12:05 - mmengine - INFO - Epoch(test) [4200/4952]    eta: 0:00:22  time: 0.0346  data_time: 0.0021  memory: 285  
2025/05/26 11:12:07 - mmengine - INFO - Epoch(test) [4250/4952]    eta: 0:00:21  time: 0.0326  data_time: 0.0024  memory: 285  
2025/05/26 11:12:08 - mmengine - INFO - Epoch(test) [4300/4952]    eta: 0:00:19  time: 0.0339  data_time: 0.0026  memory: 285  
2025/05/26 11:12:10 - mmengine - INFO - Epoch(test) [4350/4952]    eta: 0:00:18  time: 0.0339  data_time: 0.0021  memory: 285  
2025/05/26 11:12:12 - mmengine - INFO - Epoch(test) [4400/4952]    eta: 0:00:16  time: 0.0340  data_time: 0.0021  memory: 285  
2025/05/26 11:12:13 - mmengine - INFO - Epoch(test) [4450/4952]    eta: 0:00:15  time: 0.0294  data_time: 0.0018  memory: 286  
2025/05/26 11:12:15 - mmengine - INFO - Epoch(test) [4500/4952]    eta: 0:00:13  time: 0.0277  data_time: 0.0026  memory: 286  
2025/05/26 11:12:16 - mmengine - INFO - Epoch(test) [4550/4952]    eta: 0:00:12  time: 0.0277  data_time: 0.0017  memory: 284  
2025/05/26 11:12:17 - mmengine - INFO - Epoch(test) [4600/4952]    eta: 0:00:10  time: 0.0263  data_time: 0.0017  memory: 286  
2025/05/26 11:12:19 - mmengine - INFO - Epoch(test) [4650/4952]    eta: 0:00:09  time: 0.0263  data_time: 0.0016  memory: 285  
2025/05/26 11:12:20 - mmengine - INFO - Epoch(test) [4700/4952]    eta: 0:00:07  time: 0.0344  data_time: 0.0021  memory: 285  
2025/05/26 11:12:22 - mmengine - INFO - Epoch(test) [4750/4952]    eta: 0:00:06  time: 0.0347  data_time: 0.0021  memory: 284  
2025/05/26 11:12:24 - mmengine - INFO - Epoch(test) [4800/4952]    eta: 0:00:04  time: 0.0348  data_time: 0.0021  memory: 284  
2025/05/26 11:12:25 - mmengine - INFO - Epoch(test) [4850/4952]    eta: 0:00:03  time: 0.0286  data_time: 0.0017  memory: 285  
2025/05/26 11:12:27 - mmengine - INFO - Epoch(test) [4900/4952]    eta: 0:00:01  time: 0.0282  data_time: 0.0016  memory: 285  
2025/05/26 11:12:28 - mmengine - INFO - Epoch(test) [4950/4952]    eta: 0:00:00  time: 0.0291  data_time: 0.0017  memory: 284  
2025/05/26 11:12:29 - mmengine - INFO - Evaluating bbox...
2025/05/26 11:12:36 - mmengine - INFO - bbox_mAP_copypaste: 0.316 0.597 0.297 0.050 0.193 0.398
2025/05/26 11:12:36 - mmengine - INFO - Epoch(test) [4952/4952]    coco/bbox_mAP: 0.3160  coco/bbox_mAP_50: 0.5970  coco/bbox_mAP_75: 0.2970  coco/bbox_mAP_s: 0.0500  coco/bbox_mAP_m: 0.1930  coco/bbox_mAP_l: 0.3980  data_time: 0.0020  time: 0.0303
